/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the OrganizationFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationFeature{}

// OrganizationFeature struct for OrganizationFeature
type OrganizationFeature struct {
	OrganizationID string `json:"organizationID"`
	Name string `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationFeature OrganizationFeature

// NewOrganizationFeature instantiates a new OrganizationFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationFeature(organizationID string, name string, createdAt time.Time) *OrganizationFeature {
	this := OrganizationFeature{}
	this.OrganizationID = organizationID
	this.Name = name
	this.CreatedAt = createdAt
	return &this
}

// NewOrganizationFeatureWithDefaults instantiates a new OrganizationFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationFeatureWithDefaults() *OrganizationFeature {
	this := OrganizationFeature{}
	return &this
}

// GetOrganizationID returns the OrganizationID field value
func (o *OrganizationFeature) GetOrganizationID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationID
}

// GetOrganizationIDOk returns a tuple with the OrganizationID field value
// and a boolean to check if the value has been set.
func (o *OrganizationFeature) GetOrganizationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationID, true
}

// SetOrganizationID sets field value
func (o *OrganizationFeature) SetOrganizationID(v string) {
	o.OrganizationID = v
}

// GetName returns the Name field value
func (o *OrganizationFeature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationFeature) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationFeature) SetName(v string) {
	o.Name = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrganizationFeature) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationFeature) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrganizationFeature) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o OrganizationFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationID"] = o.OrganizationID
	toSerialize["name"] = o.Name
	toSerialize["createdAt"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationID",
		"name",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationFeature := _OrganizationFeature{}

	err = json.Unmarshal(data, &varOrganizationFeature)

	if err != nil {
		return err
	}

	*o = OrganizationFeature(varOrganizationFeature)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "organizationID")
		delete(additionalProperties, "name")
		delete(additionalProperties, "createdAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationFeature struct {
	value *OrganizationFeature
	isSet bool
}

func (v NullableOrganizationFeature) Get() *OrganizationFeature {
	return v.value
}

func (v *NullableOrganizationFeature) Set(val *OrganizationFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationFeature(val *OrganizationFeature) *NullableOrganizationFeature {
	return &NullableOrganizationFeature{value: val, isSet: true}
}

func (v NullableOrganizationFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


