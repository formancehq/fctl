/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ApplicationWithScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationWithScope{}

// ApplicationWithScope struct for ApplicationWithScope
type ApplicationWithScope struct {
	// Application name
	Name string `json:"name"`
	// Application description
	Description *string `json:"description,omitempty"`
	// Application URL (must be unique)
	Url string `json:"url"`
	// Application alias
	Alias string `json:"alias"`
	// Application ID
	Id string `json:"id"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	// Last update date
	UpdatedAt time.Time `json:"updatedAt"`
	// List of scopes associated with this application
	Scopes []Scope `json:"scopes"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationWithScope ApplicationWithScope

// NewApplicationWithScope instantiates a new ApplicationWithScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationWithScope(name string, url string, alias string, id string, createdAt time.Time, updatedAt time.Time, scopes []Scope) *ApplicationWithScope {
	this := ApplicationWithScope{}
	this.Name = name
	this.Url = url
	this.Alias = alias
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Scopes = scopes
	return &this
}

// NewApplicationWithScopeWithDefaults instantiates a new ApplicationWithScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationWithScopeWithDefaults() *ApplicationWithScope {
	this := ApplicationWithScope{}
	return &this
}

// GetName returns the Name field value
func (o *ApplicationWithScope) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationWithScope) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationWithScope) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationWithScope) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationWithScope) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value
func (o *ApplicationWithScope) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ApplicationWithScope) SetUrl(v string) {
	o.Url = v
}

// GetAlias returns the Alias field value
func (o *ApplicationWithScope) GetAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *ApplicationWithScope) SetAlias(v string) {
	o.Alias = v
}

// GetId returns the Id field value
func (o *ApplicationWithScope) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationWithScope) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ApplicationWithScope) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ApplicationWithScope) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ApplicationWithScope) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ApplicationWithScope) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetScopes returns the Scopes field value
func (o *ApplicationWithScope) GetScopes() []Scope {
	if o == nil {
		var ret []Scope
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
func (o *ApplicationWithScope) GetScopesOk() ([]Scope, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *ApplicationWithScope) SetScopes(v []Scope) {
	o.Scopes = v
}

func (o ApplicationWithScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationWithScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["url"] = o.Url
	toSerialize["alias"] = o.Alias
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["scopes"] = o.Scopes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplicationWithScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"alias",
		"id",
		"createdAt",
		"updatedAt",
		"scopes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationWithScope := _ApplicationWithScope{}

	err = json.Unmarshal(data, &varApplicationWithScope)

	if err != nil {
		return err
	}

	*o = ApplicationWithScope(varApplicationWithScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "url")
		delete(additionalProperties, "alias")
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "scopes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationWithScope struct {
	value *ApplicationWithScope
	isSet bool
}

func (v NullableApplicationWithScope) Get() *ApplicationWithScope {
	return v.value
}

func (v *NullableApplicationWithScope) Set(val *ApplicationWithScope) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationWithScope) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationWithScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationWithScope(val *ApplicationWithScope) *NullableApplicationWithScope {
	return &NullableApplicationWithScope{value: val, isSet: true}
}

func (v NullableApplicationWithScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationWithScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


