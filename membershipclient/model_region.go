/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Region type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Region{}

// Region struct for Region
type Region struct {
	Id string `json:"id"`
	BaseUrl string `json:"baseUrl"`
	CreatedAt string `json:"createdAt"`
	Active bool `json:"active"`
	LastPing *time.Time `json:"lastPing,omitempty"`
	Name string `json:"name"`
	Capabilities RegionCapability `json:"capabilities"`
	AgentID string `json:"agentID"`
	Outdated bool `json:"outdated"`
	CreatorId *string `json:"creatorId,omitempty"`
	Version *string `json:"version,omitempty"`
}

type _Region Region

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(id string, baseUrl string, createdAt string, active bool, name string, capabilities RegionCapability, agentID string, outdated bool) *Region {
	this := Region{}
	this.Id = id
	this.BaseUrl = baseUrl
	this.CreatedAt = createdAt
	this.Active = active
	this.Name = name
	this.Capabilities = capabilities
	this.AgentID = agentID
	this.Outdated = outdated
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetId returns the Id field value
func (o *Region) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Region) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Region) SetId(v string) {
	o.Id = v
}

// GetBaseUrl returns the BaseUrl field value
func (o *Region) GetBaseUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value
// and a boolean to check if the value has been set.
func (o *Region) GetBaseUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseUrl, true
}

// SetBaseUrl sets field value
func (o *Region) SetBaseUrl(v string) {
	o.BaseUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Region) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Region) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Region) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetActive returns the Active field value
func (o *Region) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Region) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Region) SetActive(v bool) {
	o.Active = v
}

// GetLastPing returns the LastPing field value if set, zero value otherwise.
func (o *Region) GetLastPing() time.Time {
	if o == nil || IsNil(o.LastPing) {
		var ret time.Time
		return ret
	}
	return *o.LastPing
}

// GetLastPingOk returns a tuple with the LastPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetLastPingOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPing) {
		return nil, false
	}
	return o.LastPing, true
}

// HasLastPing returns a boolean if a field has been set.
func (o *Region) HasLastPing() bool {
	if o != nil && !IsNil(o.LastPing) {
		return true
	}

	return false
}

// SetLastPing gets a reference to the given time.Time and assigns it to the LastPing field.
func (o *Region) SetLastPing(v time.Time) {
	o.LastPing = &v
}

// GetName returns the Name field value
func (o *Region) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Region) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Region) SetName(v string) {
	o.Name = v
}

// GetCapabilities returns the Capabilities field value
func (o *Region) GetCapabilities() RegionCapability {
	if o == nil {
		var ret RegionCapability
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *Region) GetCapabilitiesOk() (*RegionCapability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capabilities, true
}

// SetCapabilities sets field value
func (o *Region) SetCapabilities(v RegionCapability) {
	o.Capabilities = v
}

// GetAgentID returns the AgentID field value
func (o *Region) GetAgentID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgentID
}

// GetAgentIDOk returns a tuple with the AgentID field value
// and a boolean to check if the value has been set.
func (o *Region) GetAgentIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentID, true
}

// SetAgentID sets field value
func (o *Region) SetAgentID(v string) {
	o.AgentID = v
}

// GetOutdated returns the Outdated field value
func (o *Region) GetOutdated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Outdated
}

// GetOutdatedOk returns a tuple with the Outdated field value
// and a boolean to check if the value has been set.
func (o *Region) GetOutdatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outdated, true
}

// SetOutdated sets field value
func (o *Region) SetOutdated(v bool) {
	o.Outdated = v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *Region) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *Region) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *Region) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Region) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Region) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Region) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Region) SetVersion(v string) {
	o.Version = &v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Region) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["baseUrl"] = o.BaseUrl
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["active"] = o.Active
	if !IsNil(o.LastPing) {
		toSerialize["lastPing"] = o.LastPing
	}
	toSerialize["name"] = o.Name
	toSerialize["capabilities"] = o.Capabilities
	toSerialize["agentID"] = o.AgentID
	toSerialize["outdated"] = o.Outdated
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *Region) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"baseUrl",
		"createdAt",
		"active",
		"name",
		"capabilities",
		"agentID",
		"outdated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegion := _Region{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegion)

	if err != nil {
		return err
	}

	*o = Region(varRegion)

	return err
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


