/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
)

// checks if the OIDCConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OIDCConfig{}

// OIDCConfig struct for OIDCConfig
type OIDCConfig struct {
	// Type of the authentication provider
	Type string `json:"type"`
	// Name of the authentication provider
	Name string `json:"name"`
	// Client ID for the authentication provider
	ClientID string `json:"clientID"`
	// Client secret for the authentication provider
	ClientSecret string `json:"clientSecret"`
	Config OIDCConfigAllOfConfig `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _OIDCConfig OIDCConfig

// NewOIDCConfig instantiates a new OIDCConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOIDCConfig(type_ string, name string, clientID string, clientSecret string, config OIDCConfigAllOfConfig) *OIDCConfig {
	this := OIDCConfig{}
	this.Type = type_
	this.Name = name
	this.ClientID = clientID
	this.ClientSecret = clientSecret
	this.Config = config
	return &this
}

// NewOIDCConfigWithDefaults instantiates a new OIDCConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOIDCConfigWithDefaults() *OIDCConfig {
	this := OIDCConfig{}
	return &this
}

// GetType returns the Type field value
func (o *OIDCConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OIDCConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OIDCConfig) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *OIDCConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OIDCConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OIDCConfig) SetName(v string) {
	o.Name = v
}

// GetClientID returns the ClientID field value
func (o *OIDCConfig) GetClientID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientID
}

// GetClientIDOk returns a tuple with the ClientID field value
// and a boolean to check if the value has been set.
func (o *OIDCConfig) GetClientIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientID, true
}

// SetClientID sets field value
func (o *OIDCConfig) SetClientID(v string) {
	o.ClientID = v
}

// GetClientSecret returns the ClientSecret field value
func (o *OIDCConfig) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *OIDCConfig) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *OIDCConfig) SetClientSecret(v string) {
	o.ClientSecret = v
}

// GetConfig returns the Config field value
func (o *OIDCConfig) GetConfig() OIDCConfigAllOfConfig {
	if o == nil {
		var ret OIDCConfigAllOfConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *OIDCConfig) GetConfigOk() (*OIDCConfigAllOfConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *OIDCConfig) SetConfig(v OIDCConfigAllOfConfig) {
	o.Config = v
}

func (o OIDCConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OIDCConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["clientID"] = o.ClientID
	toSerialize["clientSecret"] = o.ClientSecret
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OIDCConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"clientID",
		"clientSecret",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOIDCConfig := _OIDCConfig{}

	err = json.Unmarshal(data, &varOIDCConfig)

	if err != nil {
		return err
	}

	*o = OIDCConfig(varOIDCConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "clientID")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOIDCConfig struct {
	value *OIDCConfig
	isSet bool
}

func (v NullableOIDCConfig) Get() *OIDCConfig {
	return v.value
}

func (v *NullableOIDCConfig) Set(val *OIDCConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOIDCConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOIDCConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOIDCConfig(val *OIDCConfig) *NullableOIDCConfig {
	return &NullableOIDCConfig{value: val, isSet: true}
}

func (v NullableOIDCConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOIDCConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


