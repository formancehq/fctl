// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/formancehq/fctl/internal/deployserverclient/models/components"
	"io"
)

type From string

const (
	FromState From = "state"
)

func (e From) ToPointer() *From {
	return &e
}
func (e *From) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "state":
		*e = From(v)
		return nil
	default:
		return fmt.Errorf("invalid value for From: %v", v)
	}
}

type ReadAppManifestRequest struct {
	ID   string `pathParam:"style=simple,explode=false,name=id"`
	From *From  `queryParam:"style=form,explode=true,name=from"`
}

func (r *ReadAppManifestRequest) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

func (r *ReadAppManifestRequest) GetFrom() *From {
	if r == nil {
		return nil
	}
	return r.From
}

type ReadAppManifestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// App manifest retrieved successfully
	// The Close method must be called on this field, even if it is not used, to prevent resource leaks.
	ResponseStream io.ReadCloser
	// Error
	Error *components.Error
}

func (r *ReadAppManifestResponse) GetHTTPMeta() components.HTTPMetadata {
	if r == nil {
		return components.HTTPMetadata{}
	}
	return r.HTTPMeta
}

func (r *ReadAppManifestResponse) GetResponseStream() io.ReadCloser {
	if r == nil {
		return nil
	}
	return r.ResponseStream
}

func (r *ReadAppManifestResponse) GetError() *components.Error {
	if r == nil {
		return nil
	}
	return r.Error
}
