/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the OrganizationApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationApplication{}

// OrganizationApplication struct for OrganizationApplication
type OrganizationApplication struct {
	// Organization ID
	OrganizationId string `json:"organizationId"`
	// Application ID
	ApplicationId string `json:"applicationId"`
	// Creation date
	CreatedAt time.Time `json:"createdAt"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationApplication OrganizationApplication

// NewOrganizationApplication instantiates a new OrganizationApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationApplication(organizationId string, applicationId string, createdAt time.Time) *OrganizationApplication {
	this := OrganizationApplication{}
	this.OrganizationId = organizationId
	this.ApplicationId = applicationId
	this.CreatedAt = createdAt
	return &this
}

// NewOrganizationApplicationWithDefaults instantiates a new OrganizationApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationApplicationWithDefaults() *OrganizationApplication {
	this := OrganizationApplication{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value
func (o *OrganizationApplication) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *OrganizationApplication) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *OrganizationApplication) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetApplicationId returns the ApplicationId field value
func (o *OrganizationApplication) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *OrganizationApplication) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *OrganizationApplication) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrganizationApplication) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationApplication) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrganizationApplication) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o OrganizationApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["applicationId"] = o.ApplicationId
	toSerialize["createdAt"] = o.CreatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationApplication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationId",
		"applicationId",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationApplication := _OrganizationApplication{}

	err = json.Unmarshal(data, &varOrganizationApplication)

	if err != nil {
		return err
	}

	*o = OrganizationApplication(varOrganizationApplication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "organizationId")
		delete(additionalProperties, "applicationId")
		delete(additionalProperties, "createdAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationApplication struct {
	value *OrganizationApplication
	isSet bool
}

func (v NullableOrganizationApplication) Get() *OrganizationApplication {
	return v.value
}

func (v *NullableOrganizationApplication) Set(val *OrganizationApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationApplication(val *OrganizationApplication) *NullableOrganizationApplication {
	return &NullableOrganizationApplication{value: val, isSet: true}
}

func (v NullableOrganizationApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


