/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
)

// checks if the OrganizationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationData{}

// OrganizationData struct for OrganizationData
type OrganizationData struct {
	// Organization name
	Name string `json:"name"`
	// Organization domain
	Domain *string `json:"domain,omitempty"`
	// Default policy ID applied to new users
	DefaultPolicyID NullableInt32 `json:"defaultPolicyID"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationData OrganizationData

// NewOrganizationData instantiates a new OrganizationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationData(name string, defaultPolicyID NullableInt32) *OrganizationData {
	this := OrganizationData{}
	this.Name = name
	this.DefaultPolicyID = defaultPolicyID
	return &this
}

// NewOrganizationDataWithDefaults instantiates a new OrganizationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationDataWithDefaults() *OrganizationData {
	this := OrganizationData{}
	return &this
}

// GetName returns the Name field value
func (o *OrganizationData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationData) SetName(v string) {
	o.Name = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *OrganizationData) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationData) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *OrganizationData) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *OrganizationData) SetDomain(v string) {
	o.Domain = &v
}

// GetDefaultPolicyID returns the DefaultPolicyID field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *OrganizationData) GetDefaultPolicyID() int32 {
	if o == nil || o.DefaultPolicyID.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DefaultPolicyID.Get()
}

// GetDefaultPolicyIDOk returns a tuple with the DefaultPolicyID field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationData) GetDefaultPolicyIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPolicyID.Get(), o.DefaultPolicyID.IsSet()
}

// SetDefaultPolicyID sets field value
func (o *OrganizationData) SetDefaultPolicyID(v int32) {
	o.DefaultPolicyID.Set(&v)
}

func (o OrganizationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	toSerialize["defaultPolicyID"] = o.DefaultPolicyID.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"defaultPolicyID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationData := _OrganizationData{}

	err = json.Unmarshal(data, &varOrganizationData)

	if err != nil {
		return err
	}

	*o = OrganizationData(varOrganizationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "defaultPolicyID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationData struct {
	value *OrganizationData
	isSet bool
}

func (v NullableOrganizationData) Get() *OrganizationData {
	return v.value
}

func (v *NullableOrganizationData) Set(val *OrganizationData) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationData) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationData(val *OrganizationData) *NullableOrganizationData {
	return &NullableOrganizationData{value: val, isSet: true}
}

func (v NullableOrganizationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


