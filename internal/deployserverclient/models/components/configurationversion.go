// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusArchived Status = "archived"
	StatusErrored  Status = "errored"
	StatusPending  Status = "pending"
	StatusFetching Status = "fetching"
	StatusUploaded Status = "uploaded"
	StatusUnknown  Status = ""
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "archived":
		fallthrough
	case "errored":
		fallthrough
	case "pending":
		fallthrough
	case "fetching":
		fallthrough
	case "uploaded":
		fallthrough
	case "":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type ConfigurationVersion struct {
	// Unique identifier for the configuration version
	ID string `json:"id"`
	// Auto queue runs when a new version is uploaded
	AutoQueueRuns bool `json:"autoQueueRuns"`
	// Error code if the version is in an error state
	Error string `json:"error"`
	// Error message if the version is in an error state
	ErrorMessage string `json:"errorMessage"`
	Status       Status `json:"status"`
}

func (o *ConfigurationVersion) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ConfigurationVersion) GetAutoQueueRuns() bool {
	if o == nil {
		return false
	}
	return o.AutoQueueRuns
}

func (o *ConfigurationVersion) GetError() string {
	if o == nil {
		return ""
	}
	return o.Error
}

func (o *ConfigurationVersion) GetErrorMessage() string {
	if o == nil {
		return ""
	}
	return o.ErrorMessage
}

func (o *ConfigurationVersion) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}
