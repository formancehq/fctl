/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AuthenticationProviderData - struct for AuthenticationProviderData
type AuthenticationProviderData struct {
	GithubIDPConfig *GithubIDPConfig
	GoogleIDPConfig *GoogleIDPConfig
	MicrosoftIDPConfig *MicrosoftIDPConfig
	OIDCConfig *OIDCConfig
}

// GithubIDPConfigAsAuthenticationProviderData is a convenience function that returns GithubIDPConfig wrapped in AuthenticationProviderData
func GithubIDPConfigAsAuthenticationProviderData(v *GithubIDPConfig) AuthenticationProviderData {
	return AuthenticationProviderData{
		GithubIDPConfig: v,
	}
}

// GoogleIDPConfigAsAuthenticationProviderData is a convenience function that returns GoogleIDPConfig wrapped in AuthenticationProviderData
func GoogleIDPConfigAsAuthenticationProviderData(v *GoogleIDPConfig) AuthenticationProviderData {
	return AuthenticationProviderData{
		GoogleIDPConfig: v,
	}
}

// MicrosoftIDPConfigAsAuthenticationProviderData is a convenience function that returns MicrosoftIDPConfig wrapped in AuthenticationProviderData
func MicrosoftIDPConfigAsAuthenticationProviderData(v *MicrosoftIDPConfig) AuthenticationProviderData {
	return AuthenticationProviderData{
		MicrosoftIDPConfig: v,
	}
}

// OIDCConfigAsAuthenticationProviderData is a convenience function that returns OIDCConfig wrapped in AuthenticationProviderData
func OIDCConfigAsAuthenticationProviderData(v *OIDCConfig) AuthenticationProviderData {
	return AuthenticationProviderData{
		OIDCConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthenticationProviderData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GithubIDPConfig
	err = newStrictDecoder(data).Decode(&dst.GithubIDPConfig)
	if err == nil {
		jsonGithubIDPConfig, _ := json.Marshal(dst.GithubIDPConfig)
		if string(jsonGithubIDPConfig) == "{}" { // empty struct
			dst.GithubIDPConfig = nil
		} else {
			if err = validator.Validate(dst.GithubIDPConfig); err != nil {
				dst.GithubIDPConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.GithubIDPConfig = nil
	}

	// try to unmarshal data into GoogleIDPConfig
	err = newStrictDecoder(data).Decode(&dst.GoogleIDPConfig)
	if err == nil {
		jsonGoogleIDPConfig, _ := json.Marshal(dst.GoogleIDPConfig)
		if string(jsonGoogleIDPConfig) == "{}" { // empty struct
			dst.GoogleIDPConfig = nil
		} else {
			if err = validator.Validate(dst.GoogleIDPConfig); err != nil {
				dst.GoogleIDPConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.GoogleIDPConfig = nil
	}

	// try to unmarshal data into MicrosoftIDPConfig
	err = newStrictDecoder(data).Decode(&dst.MicrosoftIDPConfig)
	if err == nil {
		jsonMicrosoftIDPConfig, _ := json.Marshal(dst.MicrosoftIDPConfig)
		if string(jsonMicrosoftIDPConfig) == "{}" { // empty struct
			dst.MicrosoftIDPConfig = nil
		} else {
			if err = validator.Validate(dst.MicrosoftIDPConfig); err != nil {
				dst.MicrosoftIDPConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.MicrosoftIDPConfig = nil
	}

	// try to unmarshal data into OIDCConfig
	err = newStrictDecoder(data).Decode(&dst.OIDCConfig)
	if err == nil {
		jsonOIDCConfig, _ := json.Marshal(dst.OIDCConfig)
		if string(jsonOIDCConfig) == "{}" { // empty struct
			dst.OIDCConfig = nil
		} else {
			if err = validator.Validate(dst.OIDCConfig); err != nil {
				dst.OIDCConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.OIDCConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GithubIDPConfig = nil
		dst.GoogleIDPConfig = nil
		dst.MicrosoftIDPConfig = nil
		dst.OIDCConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuthenticationProviderData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuthenticationProviderData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthenticationProviderData) MarshalJSON() ([]byte, error) {
	if src.GithubIDPConfig != nil {
		return json.Marshal(&src.GithubIDPConfig)
	}

	if src.GoogleIDPConfig != nil {
		return json.Marshal(&src.GoogleIDPConfig)
	}

	if src.MicrosoftIDPConfig != nil {
		return json.Marshal(&src.MicrosoftIDPConfig)
	}

	if src.OIDCConfig != nil {
		return json.Marshal(&src.OIDCConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthenticationProviderData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GithubIDPConfig != nil {
		return obj.GithubIDPConfig
	}

	if obj.GoogleIDPConfig != nil {
		return obj.GoogleIDPConfig
	}

	if obj.MicrosoftIDPConfig != nil {
		return obj.MicrosoftIDPConfig
	}

	if obj.OIDCConfig != nil {
		return obj.OIDCConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AuthenticationProviderData) GetActualInstanceValue() (interface{}) {
	if obj.GithubIDPConfig != nil {
		return *obj.GithubIDPConfig
	}

	if obj.GoogleIDPConfig != nil {
		return *obj.GoogleIDPConfig
	}

	if obj.MicrosoftIDPConfig != nil {
		return *obj.MicrosoftIDPConfig
	}

	if obj.OIDCConfig != nil {
		return *obj.OIDCConfig
	}

	// all schemas are nil
	return nil
}

type NullableAuthenticationProviderData struct {
	value *AuthenticationProviderData
	isSet bool
}

func (v NullableAuthenticationProviderData) Get() *AuthenticationProviderData {
	return v.value
}

func (v *NullableAuthenticationProviderData) Set(val *AuthenticationProviderData) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderData) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderData(val *AuthenticationProviderData) *NullableAuthenticationProviderData {
	return &NullableAuthenticationProviderData{value: val, isSet: true}
}

func (v NullableAuthenticationProviderData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


