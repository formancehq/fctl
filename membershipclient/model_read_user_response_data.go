/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ReadUserResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadUserResponseData{}

// ReadUserResponseData struct for ReadUserResponseData
type ReadUserResponseData struct {
	Email string `json:"email"`
	// User ID
	Id string `json:"id"`
	Role *SystemRole `json:"role,omitempty"`
	// User clientSecret used for client credentials flow
	ClientSecret string `json:"clientSecret"`
	AdditionalProperties map[string]interface{}
}

type _ReadUserResponseData ReadUserResponseData

// NewReadUserResponseData instantiates a new ReadUserResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadUserResponseData(email string, id string, clientSecret string) *ReadUserResponseData {
	this := ReadUserResponseData{}
	this.Email = email
	this.Id = id
	this.ClientSecret = clientSecret
	return &this
}

// NewReadUserResponseDataWithDefaults instantiates a new ReadUserResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadUserResponseDataWithDefaults() *ReadUserResponseData {
	this := ReadUserResponseData{}
	return &this
}

// GetEmail returns the Email field value
func (o *ReadUserResponseData) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ReadUserResponseData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ReadUserResponseData) SetEmail(v string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *ReadUserResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReadUserResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReadUserResponseData) SetId(v string) {
	o.Id = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ReadUserResponseData) GetRole() SystemRole {
	if o == nil || IsNil(o.Role) {
		var ret SystemRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadUserResponseData) GetRoleOk() (*SystemRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ReadUserResponseData) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given SystemRole and assigns it to the Role field.
func (o *ReadUserResponseData) SetRole(v SystemRole) {
	o.Role = &v
}

// GetClientSecret returns the ClientSecret field value
func (o *ReadUserResponseData) GetClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *ReadUserResponseData) GetClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *ReadUserResponseData) SetClientSecret(v string) {
	o.ClientSecret = v
}

func (o ReadUserResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadUserResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["id"] = o.Id
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["clientSecret"] = o.ClientSecret

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReadUserResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"id",
		"clientSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReadUserResponseData := _ReadUserResponseData{}

	err = json.Unmarshal(data, &varReadUserResponseData)

	if err != nil {
		return err
	}

	*o = ReadUserResponseData(varReadUserResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "id")
		delete(additionalProperties, "role")
		delete(additionalProperties, "clientSecret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReadUserResponseData struct {
	value *ReadUserResponseData
	isSet bool
}

func (v NullableReadUserResponseData) Get() *ReadUserResponseData {
	return v.value
}

func (v *NullableReadUserResponseData) Set(val *ReadUserResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableReadUserResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableReadUserResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadUserResponseData(val *ReadUserResponseData) *NullableReadUserResponseData {
	return &NullableReadUserResponseData{value: val, isSet: true}
}

func (v NullableReadUserResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadUserResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


