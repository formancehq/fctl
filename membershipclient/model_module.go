/*
Membership API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package membershipclient

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Module type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Module{}

// Module struct for Module
type Module struct {
	Name string `json:"name"`
	State string `json:"state"`
	Status string `json:"status"`
	LastStatusUpdate time.Time `json:"lastStatusUpdate"`
	LastStateUpdate time.Time `json:"lastStateUpdate"`
	ClusterStatus *string `json:"clusterStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Module Module

// NewModule instantiates a new Module object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModule(name string, state string, status string, lastStatusUpdate time.Time, lastStateUpdate time.Time) *Module {
	this := Module{}
	this.Name = name
	this.State = state
	this.Status = status
	this.LastStatusUpdate = lastStatusUpdate
	this.LastStateUpdate = lastStateUpdate
	return &this
}

// NewModuleWithDefaults instantiates a new Module object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleWithDefaults() *Module {
	this := Module{}
	return &this
}

// GetName returns the Name field value
func (o *Module) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Module) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Module) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *Module) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Module) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Module) SetState(v string) {
	o.State = v
}

// GetStatus returns the Status field value
func (o *Module) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Module) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Module) SetStatus(v string) {
	o.Status = v
}

// GetLastStatusUpdate returns the LastStatusUpdate field value
func (o *Module) GetLastStatusUpdate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastStatusUpdate
}

// GetLastStatusUpdateOk returns a tuple with the LastStatusUpdate field value
// and a boolean to check if the value has been set.
func (o *Module) GetLastStatusUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStatusUpdate, true
}

// SetLastStatusUpdate sets field value
func (o *Module) SetLastStatusUpdate(v time.Time) {
	o.LastStatusUpdate = v
}

// GetLastStateUpdate returns the LastStateUpdate field value
func (o *Module) GetLastStateUpdate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastStateUpdate
}

// GetLastStateUpdateOk returns a tuple with the LastStateUpdate field value
// and a boolean to check if the value has been set.
func (o *Module) GetLastStateUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStateUpdate, true
}

// SetLastStateUpdate sets field value
func (o *Module) SetLastStateUpdate(v time.Time) {
	o.LastStateUpdate = v
}

// GetClusterStatus returns the ClusterStatus field value if set, zero value otherwise.
func (o *Module) GetClusterStatus() string {
	if o == nil || IsNil(o.ClusterStatus) {
		var ret string
		return ret
	}
	return *o.ClusterStatus
}

// GetClusterStatusOk returns a tuple with the ClusterStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetClusterStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterStatus) {
		return nil, false
	}
	return o.ClusterStatus, true
}

// HasClusterStatus returns a boolean if a field has been set.
func (o *Module) HasClusterStatus() bool {
	if o != nil && !IsNil(o.ClusterStatus) {
		return true
	}

	return false
}

// SetClusterStatus gets a reference to the given string and assigns it to the ClusterStatus field.
func (o *Module) SetClusterStatus(v string) {
	o.ClusterStatus = &v
}

func (o Module) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Module) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	toSerialize["status"] = o.Status
	toSerialize["lastStatusUpdate"] = o.LastStatusUpdate
	toSerialize["lastStateUpdate"] = o.LastStateUpdate
	if !IsNil(o.ClusterStatus) {
		toSerialize["clusterStatus"] = o.ClusterStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Module) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"state",
		"status",
		"lastStatusUpdate",
		"lastStateUpdate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModule := _Module{}

	err = json.Unmarshal(data, &varModule)

	if err != nil {
		return err
	}

	*o = Module(varModule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "state")
		delete(additionalProperties, "status")
		delete(additionalProperties, "lastStatusUpdate")
		delete(additionalProperties, "lastStateUpdate")
		delete(additionalProperties, "clusterStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModule struct {
	value *Module
	isSet bool
}

func (v NullableModule) Get() *Module {
	return v.value
}

func (v *NullableModule) Set(val *Module) {
	v.value = val
	v.isSet = true
}

func (v NullableModule) IsSet() bool {
	return v.isSet
}

func (v *NullableModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModule(val *Module) *NullableModule {
	return &NullableModule{value: val, isSet: true}
}

func (v NullableModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


